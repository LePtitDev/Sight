name: CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'

env:
  CI_DOTNET_VERSION: 6.0.x
  CI_NUGET_OUTPUT: ${{ github.workspace }}/nuget

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET ${{ env.CI_DOTNET_VERSION }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '${{ env.CI_DOTNET_VERSION }}'
      - name: Restore dependencies
        run: dotnet restore
      - name: Build solution
        run: dotnet build --configuration Release
      - name: Test solution
        run: dotnet test --configuration Release --logger nunit
  package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET ${{ env.CI_DOTNET_VERSION }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '${{ env.CI_DOTNET_VERSION }}'
      - name: Package Source Projects
        run: for f in "${{ github.workspace }}/src/**/*.csproj"; do dotnet pack "$f" --configuration Release --output ${{ env.CI_NUGET_OUTPUT }}; done
        shell: bash
      - name: Validate Packages
        run: for f in "${{ env.CI_NUGET_OUTPUT }}/*.nupkg"; do dotnet validate package local "$f"; done
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 3
          path: ${{ env.CI_NUGET_OUTPUT }}/**/*
  deploy:
    runs-on: ubuntu-latest
    needs: [ build_and_test ]
    if: github.ref_type == 'branch' && github.ref == 'main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET ${{ env.CI_DOTNET_VERSION }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '${{ env.CI_DOTNET_VERSION }}'
      - name: Publish NuGet Packages
        run: for f in "${{ env.CI_NUGET_OUTPUT }}/*.nupkg"; do dotnet nuget push "$f" --api-key "$env:CI_NUGET_API_KEY" --skip-duplicate; done
        shell: bash
        env:
          CI_NUGET_API_KEY: ${{ secrets.CI_NUGET_API_KEY }}